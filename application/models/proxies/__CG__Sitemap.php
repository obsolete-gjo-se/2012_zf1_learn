<?php

namespace application\models\proxies\__CG__;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Sitemap extends \Sitemap implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setTitel($titel)
    {
        $this->__load();
        return parent::setTitel($titel);
    }

    public function getTitel()
    {
        $this->__load();
        return parent::getTitel();
    }

    public function setLanguage($language)
    {
        $this->__load();
        return parent::setLanguage($language);
    }

    public function getLanguage()
    {
        $this->__load();
        return parent::getLanguage();
    }

    public function setKeyword($keyword)
    {
        $this->__load();
        return parent::setKeyword($keyword);
    }

    public function getKeyword()
    {
        $this->__load();
        return parent::getKeyword();
    }

    public function setDesc($desc)
    {
        $this->__load();
        return parent::setDesc($desc);
    }

    public function getDesc()
    {
        $this->__load();
        return parent::getDesc();
    }

    public function setRobots($robots)
    {
        $this->__load();
        return parent::setRobots($robots);
    }

    public function getRobots()
    {
        $this->__load();
        return parent::getRobots();
    }

    public function setDirectory($directory)
    {
        $this->__load();
        return parent::setDirectory($directory);
    }

    public function getDirectory()
    {
        $this->__load();
        return parent::getDirectory();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setTyp($typ)
    {
        $this->__load();
        return parent::setTyp($typ);
    }

    public function getTyp()
    {
        $this->__load();
        return parent::getTyp();
    }

    public function setPath($path)
    {
        $this->__load();
        return parent::setPath($path);
    }

    public function getPath()
    {
        $this->__load();
        return parent::getPath();
    }

    public function setLandingPage($landingPage)
    {
        $this->__load();
        return parent::setLandingPage($landingPage);
    }

    public function getLandingPage()
    {
        $this->__load();
        return parent::getLandingPage();
    }

    public function setOnlyMember($onlyMember)
    {
        $this->__load();
        return parent::setOnlyMember($onlyMember);
    }

    public function getOnlyMember()
    {
        $this->__load();
        return parent::getOnlyMember();
    }

    public function setOnlyPayedMember($onlyPayedMember)
    {
        $this->__load();
        return parent::setOnlyPayedMember($onlyPayedMember);
    }

    public function getOnlyPayedMember()
    {
        $this->__load();
        return parent::getOnlyPayedMember();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'titel', 'language', 'keyword', 'desc', 'robots', 'directory', 'name', 'typ', 'path', 'landingPage', 'onlyMember', 'onlyPayedMember');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}